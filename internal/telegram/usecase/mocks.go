// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecase

import (
	"context"

	"github.com/MihaiLupoiu/wodbuster-bot/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// GetAllPendingBookings provides a mock function for the type MockStorage
func (_mock *MockStorage) GetAllPendingBookings(ctx context.Context) ([]models.BookingAttempt, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPendingBookings")
	}

	var r0 []models.BookingAttempt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.BookingAttempt, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.BookingAttempt); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BookingAttempt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GetAllPendingBookings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPendingBookings'
type MockStorage_GetAllPendingBookings_Call struct {
	*mock.Call
}

// GetAllPendingBookings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorage_Expecter) GetAllPendingBookings(ctx interface{}) *MockStorage_GetAllPendingBookings_Call {
	return &MockStorage_GetAllPendingBookings_Call{Call: _e.mock.On("GetAllPendingBookings", ctx)}
}

func (_c *MockStorage_GetAllPendingBookings_Call) Run(run func(ctx context.Context)) *MockStorage_GetAllPendingBookings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorage_GetAllPendingBookings_Call) Return(bookingAttempts []models.BookingAttempt, err error) *MockStorage_GetAllPendingBookings_Call {
	_c.Call.Return(bookingAttempts, err)
	return _c
}

func (_c *MockStorage_GetAllPendingBookings_Call) RunAndReturn(run func(ctx context.Context) ([]models.BookingAttempt, error)) *MockStorage_GetAllPendingBookings_Call {
	_c.Call.Return(run)
	return _c
}

// GetClassBookingSchedules provides a mock function for the type MockStorage
func (_mock *MockStorage) GetClassBookingSchedules(ctx context.Context, chatID int64) ([]models.ClassBookingSchedule, bool) {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetClassBookingSchedules")
	}

	var r0 []models.ClassBookingSchedule
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) ([]models.ClassBookingSchedule, bool)); ok {
		return returnFunc(ctx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) []models.ClassBookingSchedule); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ClassBookingSchedule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) bool); ok {
		r1 = returnFunc(ctx, chatID)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockStorage_GetClassBookingSchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClassBookingSchedules'
type MockStorage_GetClassBookingSchedules_Call struct {
	*mock.Call
}

// GetClassBookingSchedules is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockStorage_Expecter) GetClassBookingSchedules(ctx interface{}, chatID interface{}) *MockStorage_GetClassBookingSchedules_Call {
	return &MockStorage_GetClassBookingSchedules_Call{Call: _e.mock.On("GetClassBookingSchedules", ctx, chatID)}
}

func (_c *MockStorage_GetClassBookingSchedules_Call) Run(run func(ctx context.Context, chatID int64)) *MockStorage_GetClassBookingSchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GetClassBookingSchedules_Call) Return(classBookingSchedules []models.ClassBookingSchedule, b bool) *MockStorage_GetClassBookingSchedules_Call {
	_c.Call.Return(classBookingSchedules, b)
	return _c
}

func (_c *MockStorage_GetClassBookingSchedules_Call) RunAndReturn(run func(ctx context.Context, chatID int64) ([]models.ClassBookingSchedule, bool)) *MockStorage_GetClassBookingSchedules_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockStorage
func (_mock *MockStorage) GetUser(ctx context.Context, chatID int64) (models.User, bool) {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 models.User
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (models.User, bool)); ok {
		return returnFunc(ctx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) models.User); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		r0 = ret.Get(0).(models.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) bool); ok {
		r1 = returnFunc(ctx, chatID)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockStorage_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockStorage_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockStorage_Expecter) GetUser(ctx interface{}, chatID interface{}) *MockStorage_GetUser_Call {
	return &MockStorage_GetUser_Call{Call: _e.mock.On("GetUser", ctx, chatID)}
}

func (_c *MockStorage_GetUser_Call) Run(run func(ctx context.Context, chatID int64)) *MockStorage_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_GetUser_Call) Return(user models.User, b bool) *MockStorage_GetUser_Call {
	_c.Call.Return(user, b)
	return _c
}

func (_c *MockStorage_GetUser_Call) RunAndReturn(run func(ctx context.Context, chatID int64) (models.User, bool)) *MockStorage_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// SaveBookingAttempt provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveBookingAttempt(ctx context.Context, attempt models.BookingAttempt) error {
	ret := _mock.Called(ctx, attempt)

	if len(ret) == 0 {
		panic("no return value specified for SaveBookingAttempt")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.BookingAttempt) error); ok {
		r0 = returnFunc(ctx, attempt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveBookingAttempt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveBookingAttempt'
type MockStorage_SaveBookingAttempt_Call struct {
	*mock.Call
}

// SaveBookingAttempt is a helper method to define mock.On call
//   - ctx context.Context
//   - attempt models.BookingAttempt
func (_e *MockStorage_Expecter) SaveBookingAttempt(ctx interface{}, attempt interface{}) *MockStorage_SaveBookingAttempt_Call {
	return &MockStorage_SaveBookingAttempt_Call{Call: _e.mock.On("SaveBookingAttempt", ctx, attempt)}
}

func (_c *MockStorage_SaveBookingAttempt_Call) Run(run func(ctx context.Context, attempt models.BookingAttempt)) *MockStorage_SaveBookingAttempt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.BookingAttempt
		if args[1] != nil {
			arg1 = args[1].(models.BookingAttempt)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_SaveBookingAttempt_Call) Return(err error) *MockStorage_SaveBookingAttempt_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveBookingAttempt_Call) RunAndReturn(run func(ctx context.Context, attempt models.BookingAttempt) error) *MockStorage_SaveBookingAttempt_Call {
	_c.Call.Return(run)
	return _c
}

// SaveClassBookingSchedule provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveClassBookingSchedule(ctx context.Context, chatID int64, class models.ClassBookingSchedule) error {
	ret := _mock.Called(ctx, chatID, class)

	if len(ret) == 0 {
		panic("no return value specified for SaveClassBookingSchedule")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, models.ClassBookingSchedule) error); ok {
		r0 = returnFunc(ctx, chatID, class)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveClassBookingSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveClassBookingSchedule'
type MockStorage_SaveClassBookingSchedule_Call struct {
	*mock.Call
}

// SaveClassBookingSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - class models.ClassBookingSchedule
func (_e *MockStorage_Expecter) SaveClassBookingSchedule(ctx interface{}, chatID interface{}, class interface{}) *MockStorage_SaveClassBookingSchedule_Call {
	return &MockStorage_SaveClassBookingSchedule_Call{Call: _e.mock.On("SaveClassBookingSchedule", ctx, chatID, class)}
}

func (_c *MockStorage_SaveClassBookingSchedule_Call) Run(run func(ctx context.Context, chatID int64, class models.ClassBookingSchedule)) *MockStorage_SaveClassBookingSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 models.ClassBookingSchedule
		if args[2] != nil {
			arg2 = args[2].(models.ClassBookingSchedule)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_SaveClassBookingSchedule_Call) Return(err error) *MockStorage_SaveClassBookingSchedule_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveClassBookingSchedule_Call) RunAndReturn(run func(ctx context.Context, chatID int64, class models.ClassBookingSchedule) error) *MockStorage_SaveClassBookingSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function for the type MockStorage
func (_mock *MockStorage) SaveUser(ctx context.Context, user models.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type MockStorage_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.User
func (_e *MockStorage_Expecter) SaveUser(ctx interface{}, user interface{}) *MockStorage_SaveUser_Call {
	return &MockStorage_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, user)}
}

func (_c *MockStorage_SaveUser_Call) Run(run func(ctx context.Context, user models.User)) *MockStorage_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.User
		if args[1] != nil {
			arg1 = args[1].(models.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_SaveUser_Call) Return(err error) *MockStorage_SaveUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_SaveUser_Call) RunAndReturn(run func(ctx context.Context, user models.User) error) *MockStorage_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBookingStatus provides a mock function for the type MockStorage
func (_mock *MockStorage) UpdateBookingStatus(ctx context.Context, attemptID string, status string, errorMsg string) error {
	ret := _mock.Called(ctx, attemptID, status, errorMsg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBookingStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, attemptID, status, errorMsg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_UpdateBookingStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBookingStatus'
type MockStorage_UpdateBookingStatus_Call struct {
	*mock.Call
}

// UpdateBookingStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - attemptID string
//   - status string
//   - errorMsg string
func (_e *MockStorage_Expecter) UpdateBookingStatus(ctx interface{}, attemptID interface{}, status interface{}, errorMsg interface{}) *MockStorage_UpdateBookingStatus_Call {
	return &MockStorage_UpdateBookingStatus_Call{Call: _e.mock.On("UpdateBookingStatus", ctx, attemptID, status, errorMsg)}
}

func (_c *MockStorage_UpdateBookingStatus_Call) Run(run func(ctx context.Context, attemptID string, status string, errorMsg string)) *MockStorage_UpdateBookingStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStorage_UpdateBookingStatus_Call) Return(err error) *MockStorage_UpdateBookingStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_UpdateBookingStatus_Call) RunAndReturn(run func(ctx context.Context, attemptID string, status string, errorMsg string) error) *MockStorage_UpdateBookingStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAPIClient creates a new instance of MockAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPIClient {
	mock := &MockAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAPIClient is an autogenerated mock type for the APIClient type
type MockAPIClient struct {
	mock.Mock
}

type MockAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPIClient) EXPECT() *MockAPIClient_Expecter {
	return &MockAPIClient_Expecter{mock: &_m.Mock}
}

// BookClass provides a mock function for the type MockAPIClient
func (_mock *MockAPIClient) BookClass(ctx context.Context, email string, password string, day string, hour string) error {
	ret := _mock.Called(ctx, email, password, day, hour)

	if len(ret) == 0 {
		panic("no return value specified for BookClass")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = returnFunc(ctx, email, password, day, hour)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAPIClient_BookClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BookClass'
type MockAPIClient_BookClass_Call struct {
	*mock.Call
}

// BookClass is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
//   - day string
//   - hour string
func (_e *MockAPIClient_Expecter) BookClass(ctx interface{}, email interface{}, password interface{}, day interface{}, hour interface{}) *MockAPIClient_BookClass_Call {
	return &MockAPIClient_BookClass_Call{Call: _e.mock.On("BookClass", ctx, email, password, day, hour)}
}

func (_c *MockAPIClient_BookClass_Call) Run(run func(ctx context.Context, email string, password string, day string, hour string)) *MockAPIClient_BookClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockAPIClient_BookClass_Call) Return(err error) *MockAPIClient_BookClass_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAPIClient_BookClass_Call) RunAndReturn(run func(ctx context.Context, email string, password string, day string, hour string) error) *MockAPIClient_BookClass_Call {
	_c.Call.Return(run)
	return _c
}

// LogIn provides a mock function for the type MockAPIClient
func (_mock *MockAPIClient) LogIn(ctx context.Context, email string, password string) (string, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for LogIn")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAPIClient_LogIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogIn'
type MockAPIClient_LogIn_Call struct {
	*mock.Call
}

// LogIn is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *MockAPIClient_Expecter) LogIn(ctx interface{}, email interface{}, password interface{}) *MockAPIClient_LogIn_Call {
	return &MockAPIClient_LogIn_Call{Call: _e.mock.On("LogIn", ctx, email, password)}
}

func (_c *MockAPIClient_LogIn_Call) Run(run func(ctx context.Context, email string, password string)) *MockAPIClient_LogIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAPIClient_LogIn_Call) Return(s string, err error) *MockAPIClient_LogIn_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAPIClient_LogIn_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (string, error)) *MockAPIClient_LogIn_Call {
	_c.Call.Return(run)
	return _c
}
