// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package telegram

import (
	"context"

	"github.com/MihaiLupoiu/wodbuster-bot/internal/models"
	"github.com/MihaiLupoiu/wodbuster-bot/internal/telegram/usecase"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBotManager creates a new instance of MockBotManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBotManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBotManager {
	mock := &MockBotManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBotManager is an autogenerated mock type for the BotManager type
type MockBotManager struct {
	mock.Mock
}

type MockBotManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBotManager) EXPECT() *MockBotManager_Expecter {
	return &MockBotManager_Expecter{mock: &_m.Mock}
}

// CancelBooking provides a mock function for the type MockBotManager
func (_mock *MockBotManager) CancelBooking(chatID int64) bool {
	ret := _mock.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for CancelBooking")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = returnFunc(chatID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockBotManager_CancelBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelBooking'
type MockBotManager_CancelBooking_Call struct {
	*mock.Call
}

// CancelBooking is a helper method to define mock.On call
//   - chatID int64
func (_e *MockBotManager_Expecter) CancelBooking(chatID interface{}) *MockBotManager_CancelBooking_Call {
	return &MockBotManager_CancelBooking_Call{Call: _e.mock.On("CancelBooking", chatID)}
}

func (_c *MockBotManager_CancelBooking_Call) Run(run func(chatID int64)) *MockBotManager_CancelBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBotManager_CancelBooking_Call) Return(b bool) *MockBotManager_CancelBooking_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockBotManager_CancelBooking_Call) RunAndReturn(run func(chatID int64) bool) *MockBotManager_CancelBooking_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveBookings provides a mock function for the type MockBotManager
func (_mock *MockBotManager) GetActiveBookings() map[int64]*usecase.BookingContext {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActiveBookings")
	}

	var r0 map[int64]*usecase.BookingContext
	if returnFunc, ok := ret.Get(0).(func() map[int64]*usecase.BookingContext); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]*usecase.BookingContext)
		}
	}
	return r0
}

// MockBotManager_GetActiveBookings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveBookings'
type MockBotManager_GetActiveBookings_Call struct {
	*mock.Call
}

// GetActiveBookings is a helper method to define mock.On call
func (_e *MockBotManager_Expecter) GetActiveBookings() *MockBotManager_GetActiveBookings_Call {
	return &MockBotManager_GetActiveBookings_Call{Call: _e.mock.On("GetActiveBookings")}
}

func (_c *MockBotManager_GetActiveBookings_Call) Run(run func()) *MockBotManager_GetActiveBookings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBotManager_GetActiveBookings_Call) Return(int64ToBookingContext map[int64]*usecase.BookingContext) *MockBotManager_GetActiveBookings_Call {
	_c.Call.Return(int64ToBookingContext)
	return _c
}

func (_c *MockBotManager_GetActiveBookings_Call) RunAndReturn(run func() map[int64]*usecase.BookingContext) *MockBotManager_GetActiveBookings_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduleInfo provides a mock function for the type MockBotManager
func (_mock *MockBotManager) GetScheduleInfo() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScheduleInfo")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockBotManager_GetScheduleInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduleInfo'
type MockBotManager_GetScheduleInfo_Call struct {
	*mock.Call
}

// GetScheduleInfo is a helper method to define mock.On call
func (_e *MockBotManager_Expecter) GetScheduleInfo() *MockBotManager_GetScheduleInfo_Call {
	return &MockBotManager_GetScheduleInfo_Call{Call: _e.mock.On("GetScheduleInfo")}
}

func (_c *MockBotManager_GetScheduleInfo_Call) Run(run func()) *MockBotManager_GetScheduleInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBotManager_GetScheduleInfo_Call) Return(s string) *MockBotManager_GetScheduleInfo_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockBotManager_GetScheduleInfo_Call) RunAndReturn(run func() string) *MockBotManager_GetScheduleInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockBotManager
func (_mock *MockBotManager) GetUser(ctx context.Context, chatID int64) (models.User, bool) {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 models.User
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (models.User, bool)); ok {
		return returnFunc(ctx, chatID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) models.User); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		r0 = ret.Get(0).(models.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) bool); ok {
		r1 = returnFunc(ctx, chatID)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockBotManager_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockBotManager_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockBotManager_Expecter) GetUser(ctx interface{}, chatID interface{}) *MockBotManager_GetUser_Call {
	return &MockBotManager_GetUser_Call{Call: _e.mock.On("GetUser", ctx, chatID)}
}

func (_c *MockBotManager_GetUser_Call) Run(run func(ctx context.Context, chatID int64)) *MockBotManager_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBotManager_GetUser_Call) Return(user models.User, b bool) *MockBotManager_GetUser_Call {
	_c.Call.Return(user, b)
	return _c
}

func (_c *MockBotManager_GetUser_Call) RunAndReturn(run func(ctx context.Context, chatID int64) (models.User, bool)) *MockBotManager_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// IsAuthenticated provides a mock function for the type MockBotManager
func (_mock *MockBotManager) IsAuthenticated(ctx context.Context, chatID int64) bool {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthenticated")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockBotManager_IsAuthenticated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuthenticated'
type MockBotManager_IsAuthenticated_Call struct {
	*mock.Call
}

// IsAuthenticated is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockBotManager_Expecter) IsAuthenticated(ctx interface{}, chatID interface{}) *MockBotManager_IsAuthenticated_Call {
	return &MockBotManager_IsAuthenticated_Call{Call: _e.mock.On("IsAuthenticated", ctx, chatID)}
}

func (_c *MockBotManager_IsAuthenticated_Call) Run(run func(ctx context.Context, chatID int64)) *MockBotManager_IsAuthenticated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBotManager_IsAuthenticated_Call) Return(b bool) *MockBotManager_IsAuthenticated_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockBotManager_IsAuthenticated_Call) RunAndReturn(run func(ctx context.Context, chatID int64) bool) *MockBotManager_IsAuthenticated_Call {
	_c.Call.Return(run)
	return _c
}

// LogInAndSave provides a mock function for the type MockBotManager
func (_mock *MockBotManager) LogInAndSave(ctx context.Context, chatID int64, email string, password string) error {
	ret := _mock.Called(ctx, chatID, email, password)

	if len(ret) == 0 {
		panic("no return value specified for LogInAndSave")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = returnFunc(ctx, chatID, email, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBotManager_LogInAndSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogInAndSave'
type MockBotManager_LogInAndSave_Call struct {
	*mock.Call
}

// LogInAndSave is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - email string
//   - password string
func (_e *MockBotManager_Expecter) LogInAndSave(ctx interface{}, chatID interface{}, email interface{}, password interface{}) *MockBotManager_LogInAndSave_Call {
	return &MockBotManager_LogInAndSave_Call{Call: _e.mock.On("LogInAndSave", ctx, chatID, email, password)}
}

func (_c *MockBotManager_LogInAndSave_Call) Run(run func(ctx context.Context, chatID int64, email string, password string)) *MockBotManager_LogInAndSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockBotManager_LogInAndSave_Call) Return(err error) *MockBotManager_LogInAndSave_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBotManager_LogInAndSave_Call) RunAndReturn(run func(ctx context.Context, chatID int64, email string, password string) error) *MockBotManager_LogInAndSave_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduleBookClass provides a mock function for the type MockBotManager
func (_mock *MockBotManager) ScheduleBookClass(ctx context.Context, chatID int64, class models.ClassBookingSchedule) error {
	ret := _mock.Called(ctx, chatID, class)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleBookClass")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, models.ClassBookingSchedule) error); ok {
		r0 = returnFunc(ctx, chatID, class)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBotManager_ScheduleBookClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleBookClass'
type MockBotManager_ScheduleBookClass_Call struct {
	*mock.Call
}

// ScheduleBookClass is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - class models.ClassBookingSchedule
func (_e *MockBotManager_Expecter) ScheduleBookClass(ctx interface{}, chatID interface{}, class interface{}) *MockBotManager_ScheduleBookClass_Call {
	return &MockBotManager_ScheduleBookClass_Call{Call: _e.mock.On("ScheduleBookClass", ctx, chatID, class)}
}

func (_c *MockBotManager_ScheduleBookClass_Call) Run(run func(ctx context.Context, chatID int64, class models.ClassBookingSchedule)) *MockBotManager_ScheduleBookClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 models.ClassBookingSchedule
		if args[2] != nil {
			arg2 = args[2].(models.ClassBookingSchedule)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBotManager_ScheduleBookClass_Call) Return(err error) *MockBotManager_ScheduleBookClass_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBotManager_ScheduleBookClass_Call) RunAndReturn(run func(ctx context.Context, chatID int64, class models.ClassBookingSchedule) error) *MockBotManager_ScheduleBookClass_Call {
	_c.Call.Return(run)
	return _c
}

// TestUserSession provides a mock function for the type MockBotManager
func (_mock *MockBotManager) TestUserSession(ctx context.Context, chatID int64) error {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for TestUserSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBotManager_TestUserSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestUserSession'
type MockBotManager_TestUserSession_Call struct {
	*mock.Call
}

// TestUserSession is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockBotManager_Expecter) TestUserSession(ctx interface{}, chatID interface{}) *MockBotManager_TestUserSession_Call {
	return &MockBotManager_TestUserSession_Call{Call: _e.mock.On("TestUserSession", ctx, chatID)}
}

func (_c *MockBotManager_TestUserSession_Call) Run(run func(ctx context.Context, chatID int64)) *MockBotManager_TestUserSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBotManager_TestUserSession_Call) Return(err error) *MockBotManager_TestUserSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBotManager_TestUserSession_Call) RunAndReturn(run func(ctx context.Context, chatID int64) error) *MockBotManager_TestUserSession_Call {
	_c.Call.Return(run)
	return _c
}
