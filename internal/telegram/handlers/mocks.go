// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers

import (
	"context"

	"github.com/MihaiLupoiu/wodbuster-bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBookingManager creates a new instance of MockBookingManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookingManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookingManager {
	mock := &MockBookingManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBookingManager is an autogenerated mock type for the BookingManager type
type MockBookingManager struct {
	mock.Mock
}

type MockBookingManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookingManager) EXPECT() *MockBookingManager_Expecter {
	return &MockBookingManager_Expecter{mock: &_m.Mock}
}

// IsAuthenticated provides a mock function for the type MockBookingManager
func (_mock *MockBookingManager) IsAuthenticated(ctx context.Context, chatID int64) bool {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthenticated")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockBookingManager_IsAuthenticated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuthenticated'
type MockBookingManager_IsAuthenticated_Call struct {
	*mock.Call
}

// IsAuthenticated is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockBookingManager_Expecter) IsAuthenticated(ctx interface{}, chatID interface{}) *MockBookingManager_IsAuthenticated_Call {
	return &MockBookingManager_IsAuthenticated_Call{Call: _e.mock.On("IsAuthenticated", ctx, chatID)}
}

func (_c *MockBookingManager_IsAuthenticated_Call) Run(run func(ctx context.Context, chatID int64)) *MockBookingManager_IsAuthenticated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBookingManager_IsAuthenticated_Call) Return(b bool) *MockBookingManager_IsAuthenticated_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockBookingManager_IsAuthenticated_Call) RunAndReturn(run func(ctx context.Context, chatID int64) bool) *MockBookingManager_IsAuthenticated_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduleBookClass provides a mock function for the type MockBookingManager
func (_mock *MockBookingManager) ScheduleBookClass(ctx context.Context, chatID int64, class models.ClassBookingSchedule) error {
	ret := _mock.Called(ctx, chatID, class)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleBookClass")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, models.ClassBookingSchedule) error); ok {
		r0 = returnFunc(ctx, chatID, class)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBookingManager_ScheduleBookClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleBookClass'
type MockBookingManager_ScheduleBookClass_Call struct {
	*mock.Call
}

// ScheduleBookClass is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - class models.ClassBookingSchedule
func (_e *MockBookingManager_Expecter) ScheduleBookClass(ctx interface{}, chatID interface{}, class interface{}) *MockBookingManager_ScheduleBookClass_Call {
	return &MockBookingManager_ScheduleBookClass_Call{Call: _e.mock.On("ScheduleBookClass", ctx, chatID, class)}
}

func (_c *MockBookingManager_ScheduleBookClass_Call) Run(run func(ctx context.Context, chatID int64, class models.ClassBookingSchedule)) *MockBookingManager_ScheduleBookClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 models.ClassBookingSchedule
		if args[2] != nil {
			arg2 = args[2].(models.ClassBookingSchedule)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBookingManager_ScheduleBookClass_Call) Return(err error) *MockBookingManager_ScheduleBookClass_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBookingManager_ScheduleBookClass_Call) RunAndReturn(run func(ctx context.Context, chatID int64, class models.ClassBookingSchedule) error) *MockBookingManager_ScheduleBookClass_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookingBotAPI creates a new instance of MockBookingBotAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookingBotAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookingBotAPI {
	mock := &MockBookingBotAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBookingBotAPI is an autogenerated mock type for the BookingBotAPI type
type MockBookingBotAPI struct {
	mock.Mock
}

type MockBookingBotAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookingBotAPI) EXPECT() *MockBookingBotAPI_Expecter {
	return &MockBookingBotAPI_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockBookingBotAPI
func (_mock *MockBookingBotAPI) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	ret := _mock.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 tgbotapi.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(tgbotapi.Chattable) (tgbotapi.Message, error)); ok {
		return returnFunc(c)
	}
	if returnFunc, ok := ret.Get(0).(func(tgbotapi.Chattable) tgbotapi.Message); ok {
		r0 = returnFunc(c)
	} else {
		r0 = ret.Get(0).(tgbotapi.Message)
	}
	if returnFunc, ok := ret.Get(1).(func(tgbotapi.Chattable) error); ok {
		r1 = returnFunc(c)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookingBotAPI_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockBookingBotAPI_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - c tgbotapi.Chattable
func (_e *MockBookingBotAPI_Expecter) Send(c interface{}) *MockBookingBotAPI_Send_Call {
	return &MockBookingBotAPI_Send_Call{Call: _e.mock.On("Send", c)}
}

func (_c *MockBookingBotAPI_Send_Call) Run(run func(c tgbotapi.Chattable)) *MockBookingBotAPI_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 tgbotapi.Chattable
		if args[0] != nil {
			arg0 = args[0].(tgbotapi.Chattable)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBookingBotAPI_Send_Call) Return(message tgbotapi.Message, err error) *MockBookingBotAPI_Send_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockBookingBotAPI_Send_Call) RunAndReturn(run func(c tgbotapi.Chattable) (tgbotapi.Message, error)) *MockBookingBotAPI_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogInManager creates a new instance of MockLogInManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogInManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogInManager {
	mock := &MockLogInManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogInManager is an autogenerated mock type for the LogInManager type
type MockLogInManager struct {
	mock.Mock
}

type MockLogInManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogInManager) EXPECT() *MockLogInManager_Expecter {
	return &MockLogInManager_Expecter{mock: &_m.Mock}
}

// IsAuthenticated provides a mock function for the type MockLogInManager
func (_mock *MockLogInManager) IsAuthenticated(ctx context.Context, chatID int64) bool {
	ret := _mock.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthenticated")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = returnFunc(ctx, chatID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockLogInManager_IsAuthenticated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAuthenticated'
type MockLogInManager_IsAuthenticated_Call struct {
	*mock.Call
}

// IsAuthenticated is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockLogInManager_Expecter) IsAuthenticated(ctx interface{}, chatID interface{}) *MockLogInManager_IsAuthenticated_Call {
	return &MockLogInManager_IsAuthenticated_Call{Call: _e.mock.On("IsAuthenticated", ctx, chatID)}
}

func (_c *MockLogInManager_IsAuthenticated_Call) Run(run func(ctx context.Context, chatID int64)) *MockLogInManager_IsAuthenticated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLogInManager_IsAuthenticated_Call) Return(b bool) *MockLogInManager_IsAuthenticated_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockLogInManager_IsAuthenticated_Call) RunAndReturn(run func(ctx context.Context, chatID int64) bool) *MockLogInManager_IsAuthenticated_Call {
	_c.Call.Return(run)
	return _c
}

// LogInAndSave provides a mock function for the type MockLogInManager
func (_mock *MockLogInManager) LogInAndSave(ctx context.Context, chatID int64, email string, password string) {
	_mock.Called(ctx, chatID, email, password)
	return
}

// MockLogInManager_LogInAndSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogInAndSave'
type MockLogInManager_LogInAndSave_Call struct {
	*mock.Call
}

// LogInAndSave is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - email string
//   - password string
func (_e *MockLogInManager_Expecter) LogInAndSave(ctx interface{}, chatID interface{}, email interface{}, password interface{}) *MockLogInManager_LogInAndSave_Call {
	return &MockLogInManager_LogInAndSave_Call{Call: _e.mock.On("LogInAndSave", ctx, chatID, email, password)}
}

func (_c *MockLogInManager_LogInAndSave_Call) Run(run func(ctx context.Context, chatID int64, email string, password string)) *MockLogInManager_LogInAndSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockLogInManager_LogInAndSave_Call) Return() *MockLogInManager_LogInAndSave_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogInManager_LogInAndSave_Call) RunAndReturn(run func(ctx context.Context, chatID int64, email string, password string)) *MockLogInManager_LogInAndSave_Call {
	_c.Run(run)
	return _c
}

// NewMockLogInBotAPI creates a new instance of MockLogInBotAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogInBotAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogInBotAPI {
	mock := &MockLogInBotAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogInBotAPI is an autogenerated mock type for the LogInBotAPI type
type MockLogInBotAPI struct {
	mock.Mock
}

type MockLogInBotAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogInBotAPI) EXPECT() *MockLogInBotAPI_Expecter {
	return &MockLogInBotAPI_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockLogInBotAPI
func (_mock *MockLogInBotAPI) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	ret := _mock.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 tgbotapi.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(tgbotapi.Chattable) (tgbotapi.Message, error)); ok {
		return returnFunc(c)
	}
	if returnFunc, ok := ret.Get(0).(func(tgbotapi.Chattable) tgbotapi.Message); ok {
		r0 = returnFunc(c)
	} else {
		r0 = ret.Get(0).(tgbotapi.Message)
	}
	if returnFunc, ok := ret.Get(1).(func(tgbotapi.Chattable) error); ok {
		r1 = returnFunc(c)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLogInBotAPI_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockLogInBotAPI_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - c tgbotapi.Chattable
func (_e *MockLogInBotAPI_Expecter) Send(c interface{}) *MockLogInBotAPI_Send_Call {
	return &MockLogInBotAPI_Send_Call{Call: _e.mock.On("Send", c)}
}

func (_c *MockLogInBotAPI_Send_Call) Run(run func(c tgbotapi.Chattable)) *MockLogInBotAPI_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 tgbotapi.Chattable
		if args[0] != nil {
			arg0 = args[0].(tgbotapi.Chattable)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogInBotAPI_Send_Call) Return(message tgbotapi.Message, err error) *MockLogInBotAPI_Send_Call {
	_c.Call.Return(message, err)
	return _c
}

func (_c *MockLogInBotAPI_Send_Call) RunAndReturn(run func(c tgbotapi.Chattable) (tgbotapi.Message, error)) *MockLogInBotAPI_Send_Call {
	_c.Call.Return(run)
	return _c
}
